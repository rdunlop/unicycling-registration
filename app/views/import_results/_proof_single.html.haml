%table.import_results.sortable
  - cache [@competition, display_username] do
    %thead
      %tr
        - if display_username
          %th Username
        %th Entry Number
        %th ID
        %th Name
        %th Competitor Exists?
        - if @competition.imports_times?
          %th Time
        - else
          %th Points
        %th Disqualified
        %th Entered At
  %tbody
    - @import_results.each_with_index do |result, index|
      - cache [result, Registrant, @competition, display_username] do
        %tr
          - if display_username
            %td= result.user
          %td= index + 1
          %td= result.bib_number
          = render partial: "matching_registrant_cell", locals: { import_result: result }
          - if @competition.imports_times?
            %td= result.full_time
          - else
            %td= result.points
          %td= result.disqualified? ? "yes" : ""
          %td= result.created_at.to_formatted_s(:short)

%hr
- imported_bib_numbers = @import_results.map(&:bib_number)
- @competitors_without_results = @competition.competitors.select{|competitor| !imported_bib_numbers.include?(competitor.lowest_member_bib_number) }
%table.sortable
  %caption Competitors without Results
  %thead
    %tr
      %th ID
      %th Name
      %th Status
  %tbody
    - @competitors_without_results.each do |competitor|
      %tr
        %td= competitor.bib_number
        %td= competitor
        %td= competitor.status
%hr
